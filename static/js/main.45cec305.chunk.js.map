{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/Login/auth-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","status","isInitialized","type","updateTaskThunkCreator","domainModel","getState","task","tasks","find","t","id","apiModel","description","priority","startDate","deadline","then","res","resultCode","updateTaskAC","catch","console","warn","fetchTodolistsThunkCreator","todolists","todos","forEach","td","setTasksAC","items","isLoggedIn","setIsLoggedInAC","value","rootReducer","combineReducers","state","action","filter","tl","newTodoList","todolist","entityStatus","map","stateCopy","filteredTasks","newTask","todoListId","newTasks","app","auth","store","createStore","applyMiddleware","thunkMiddleware","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","trimmedTitle","trim","addItemHandler","TextField","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","ControlPoint","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","TodoList","demo","useDispatch","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","changeTodolistTitle","removeTodolist","Delete","Button","TodolistsList","useSelector","useEffect","removeTaskAC","removeTaskThunkCreator","newTaskTitle","item","addTaskThunkCreator","newTitle","removeTodolistAC","removeTodolistThunkCreator","addTodoList","addTodolistThunkCreator","changeTodolistTitleThunkCreator","Grid","container","spacing","style","padding","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","finally","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","width","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45cec305.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, { AxiosResponse } from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"bcdd4faf-f5b8-4f33-8a06-1a47aa179469\",\r\n  },\r\n});\r\n\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    const promise = instance.get<Array<TodolistType>>(\"todo-lists\");\r\n    return promise;\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<\r\n      { title: string },\r\n      { data: ResponseType<{ item: TodolistType }> }\r\n    >(\"todo-lists\", { title });\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}`);\r\n    return promise;\r\n  },\r\n  updateTodolistTitle(todolistId: string, title: string) {\r\n    const promise = instance.put<\r\n      { title: string },\r\n      AxiosResponse<ResponseType>\r\n    >(`todo-lists/${todolistId}`, { title });\r\n    return promise;\r\n  },\r\n\r\n  getTasks(todolistId: string) {\r\n    const promise = instance.get<GetTasksResponse>(\r\n      `todo-lists/${todolistId}/tasks`\r\n    );\r\n    return promise;\r\n  },\r\n  createTask(todolistId: string, taskTitle: string) {\r\n    const promise = instance.post<\r\n      { title: string },\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>\r\n    >(`todo-lists/${todolistId}/tasks`, { title: taskTitle });\r\n    return promise;\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    const promise = instance.put<\r\n      UpdateTaskModelType,\r\n      AxiosResponse<ResponseType<{ item: TaskType }>>\r\n    >(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    return promise;\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    const promise = instance.delete<ResponseType>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`\r\n    );\r\n    return promise;\r\n  },\r\n};\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha?: string;\r\n};\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<\r\n     LoginParamsType,\r\n      AxiosResponse<ResponseType<{ userId: number }>>\r\n    >(\"auth/login\", data );\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType<{ userId?: number }>>(\"/auth/login\");\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<AuthMeType>>(\"auth/me\");\r\n  },\r\n};\r\n\r\n// types\r\n\r\ntype AuthMeType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  addedDate: string;\r\n  order: number;\r\n};\r\n\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  fieldsErrors: Array<string>;\r\n  data: D;\r\n};\r\n\r\ntype GetTasksResponse = {\r\n  items: Array<TaskType>;\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n\r\ntype CreateUpdateTaskResponse = {\r\n  item: TaskType;\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n};\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\n\r\nexport type UpdateTaskModelType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\n","\r\nimport { Dispatch } from \"redux\"\r\nimport { ResponseType } from \"../api/todolists-api\"\r\nimport { setAppErrorAC, setAppStatusAC, SetAppErrorActionType, SetAppStatusActionType } from \"../app/app-reducer\"\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType> ) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"some error occured\"))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import { setIsLoggedInAC } from './../features/Login/auth-reducer';\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/todolists-api\"\r\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppInitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если произойдёт какая-либо глобальная ошибка, мы запишем текст ошибки сюда\r\n    error: null | string\r\n    // true когда приложение пронициализировалось (проверили юзера, получили настройки и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: AppInitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return { ...state, isInitialized: action.value }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({ type: 'APP/SET-IS-INITIALIZED', value } as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC(\"succeeded\"));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n          })\r\n          .finally(() => {\r\n            dispatch(setAppStatusAC(\"idle\"));\r\n            dispatch(setAppInitializedAC(true));\r\n          });\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>","import {\r\n  setAppErrorAC,\r\n  SetAppErrorActionType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType,\r\n} from \"./../../app/app-reducer\";\r\n\r\nimport {\r\n  TaskPriorities,\r\n  TaskType,\r\n  todolistsAPI,\r\n  UpdateTaskModelType,\r\n} from \"../../api/todolists-api\";\r\nimport {\r\n  AddTodolistActionType,\r\n  ClearTodosDataActionType,\r\n  RemoveTodolistActionType,\r\n  setTodolistsAC,\r\n  SetTodolistsActionType,\r\n} from \"./todolists-reducer\";\r\nimport { TaskStatuses } from \"../../api/todolists-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport {\r\n  handleServerAppError,\r\n  handleServerNetworkError,\r\n} from \"../../utils/error-utils\";\r\n\r\n// types\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>;\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>;\r\nexport type UpdateTaskActionType = ReturnType<typeof updateTaskAC>;\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>;\r\n\r\ntype ActionsType =\r\n  | RemoveTaskActionType\r\n  | AddTaskActionType\r\n  | UpdateTaskActionType\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\n  | SetTasksActionType\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | ClearTodosDataActionType;\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  description?: string;\r\n  title?: string;\r\n  status?: TaskStatuses;\r\n  priority?: TaskPriorities;\r\n  startDate?: string;\r\n  deadline?: string;\r\n};\r\n\r\nconst initialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (\r\n  state: TasksStateType = initialState,\r\n  action: ActionsType\r\n): TasksStateType => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TASK\": {\r\n      const stateCopy = { ...state };\r\n      const tasks = state[action.todolistId];\r\n      const filteredTasks = tasks.filter((t) => t.id != action.taskId);\r\n      stateCopy[action.todolistId] = filteredTasks;\r\n      return stateCopy;\r\n    }\r\n    case \"ADD-TASK\": {\r\n      const stateCopy = { ...state };\r\n      const newTask = action.task;\r\n      const tasks = stateCopy[newTask.todoListId];\r\n      const newTasks = [newTask, ...tasks];\r\n      stateCopy[newTask.todoListId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n    case \"UPDATE-TASK\": {\r\n      const stateCopy = { ...state };\r\n      const tasks = stateCopy[action.todolistId];\r\n      stateCopy[action.todolistId] = tasks.map((t) =>\r\n        t.id === action.taskId ? { ...t, ...action.model } : t\r\n      );\r\n\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"ADD-TODOLIST\":\r\n      return {\r\n        ...state,\r\n        [action.todolist.id]: [],\r\n      };\r\n\r\n    case \"REMOVE-TODOLIST\": {\r\n      const stateCopy = { ...state };\r\n      delete stateCopy[action.id];\r\n      return stateCopy;\r\n    }\r\n    case \"SET-TODOLISTS\": {\r\n      const stateCopy = { ...state };\r\n\r\n      action.todolists.forEach((tl) => {\r\n        stateCopy[tl.id] = [];\r\n      });\r\n\r\n      return stateCopy;\r\n    }\r\n    case \"SET-TASKS\":\r\n      return {\r\n        ...state,\r\n        [action.todolistId]: action.tasks,\r\n      };\r\n    case \"CLEAR-DATA\":\r\n      return {};\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//actions\r\nexport const removeTaskAC = (todolistId: string, taskId: string) =>\r\n  ({ type: \"REMOVE-TASK\", todolistId, taskId } as const);\r\nexport const addTaskAC = (task: TaskType) =>\r\n  ({ type: \"ADD-TASK\", task } as const);\r\nexport const updateTaskAC = (\r\n  todolistId: string,\r\n  taskId: string,\r\n  model: UpdateDomainTaskModelType\r\n) => ({ type: \"UPDATE-TASK\", taskId, todolistId, model } as const);\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n  ({ type: \"SET-TASKS\", tasks, todolistId } as const);\r\n\r\n//thunks\r\nexport const fetchTasksThunkCreator = (todolistId: string) => (\r\n  dispatch: Dispatch<ActionsType>\r\n) => {\r\n  dispatch(setAppStatusAC(\"loading\"));\r\n  todolistsAPI.getTasks(todolistId).then((res) => {\r\n    dispatch(setTasksAC(res.data.items, todolistId));\r\n    dispatch(setAppStatusAC(\"succeeded\"));\r\n  });\r\n};\r\n\r\nexport const removeTaskThunkCreator = (todolistId: string, taskId: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId).then((res) => {\r\n      dispatch(removeTaskAC(todolistId, taskId));\r\n    });\r\n  };\r\n};\r\n\r\nexport const addTaskThunkCreator = (\r\n  todolistId: string,\r\n  newTaskTitle: string\r\n) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI\r\n      .createTask(todolistId, newTaskTitle)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(addTaskAC(res.data.data.item));\r\n          dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      });\r\n  };\r\n};\r\n\r\nexport const updateTaskThunkCreator = (\r\n  todolistId: string,\r\n  taskId: string,\r\n  domainModel: UpdateDomainTaskModelType\r\n) => {\r\n  return (\r\n    dispatch: Dispatch<ActionsType>,\r\n    getState: () => AppRootStateType\r\n  ) => {\r\n    const state = getState();\r\n    const task = state.tasks[todolistId].find((t) => t.id === taskId);\r\n\r\n    if (!task) {\r\n      //throw new Error(\"task not found in the state\")\r\n      console.warn(\"task not found in the state\");\r\n      return;\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      description: task.description,\r\n      title: task.title,\r\n      status: task.status,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      deadline: task.deadline,\r\n      ...domainModel,\r\n    };\r\n\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI\r\n      .updateTask(todolistId, taskId, apiModel)\r\n      .then((res) => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(updateTaskAC(todolistId, taskId, domainModel));\r\n          dispatch(setAppStatusAC(\"succeeded\"));\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      });\r\n  };\r\n};\r\n","import { SetAppErrorActionType } from \"./../../app/app-reducer\";\r\nimport { TodolistType, todolistsAPI } from \"./../../api/todolists-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport {\r\n  RequestStatusType,\r\n  setAppStatusAC,\r\n  SetAppStatusActionType,\r\n} from \"../../app/app-reducer\";\r\nimport { handleServerNetworkError } from \"../../utils/error-utils\";\r\nimport { fetchTasksThunkCreator } from \"./tasks-reducer\";\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistFilterActionType = ReturnType<\r\n  typeof changeTodolistFilterAC\r\n>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<\r\n  typeof changeTodolistEntityStatusAC\r\n>;\r\nexport type ClearTodosDataActionType = ReturnType<typeof clearTodosDataAC>;\r\n\r\ntype ActionsType =\r\n  | RemoveTodolistActionType\r\n  | AddTodolistActionType\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ChangeTodolistFilterActionType\r\n  | SetTodolistsActionType\r\n  | SetAppStatusActionType\r\n  | SetAppErrorActionType\r\n  | ReturnType<typeof changeTodolistEntityStatusAC>\r\n  | ClearTodosDataActionType;\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n  filter: FilterValuesType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todolistsReducer = (\r\n  state: Array<TodolistDomainType> = initialState,\r\n  action: ActionsType\r\n): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TODOLIST\":\r\n      return state.filter((tl) => tl.id !== action.id);\r\n\r\n    case \"ADD-TODOLIST\":\r\n      let newTodoList: TodolistDomainType = {\r\n        ...action.todolist,\r\n        filter: \"all\",\r\n        entityStatus: \"idle\",\r\n      };\r\n      return [newTodoList, ...state];\r\n\r\n    case \"CHANGE-TODOLIST-TITLE\":\r\n      return state.map((tl) =>\r\n        tl.id === action.id ? { ...tl, title: action.title } : tl\r\n      );\r\n\r\n    case \"CHANGE-TODOLIST-FILTER\":\r\n      return state.map((tl) =>\r\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl\r\n      );\r\n\r\n    case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n      return state.map((tl) =>\r\n        tl.id === action.id ? { ...tl, entityStatus: action.status } : tl\r\n      );\r\n\r\n    case \"SET-TODOLISTS\":\r\n      return action.todolists.map((tl) => ({\r\n        ...tl,\r\n        filter: \"all\",\r\n        entityStatus: \"idle\",\r\n      }));\r\n    case \"CLEAR-DATA\":\r\n      return [];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n  ({ type: \"REMOVE-TODOLIST\", id: todolistId } as const);\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n  ({ type: \"ADD-TODOLIST\", todolist } as const);\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n  ({ type: \"CHANGE-TODOLIST-TITLE\", id, title } as const);\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n  ({ type: \"CHANGE-TODOLIST-FILTER\", id, filter } as const);\r\n\r\nexport const changeTodolistEntityStatusAC = (\r\n  id: string,\r\n  status: RequestStatusType\r\n) => ({ type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, status } as const);\r\n\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n  ({ type: \"SET-TODOLISTS\", todolists } as const);\r\n\r\nexport const clearTodosDataAC = () => ({ type: \"CLEAR-DATA\" } as const);\r\n\r\n// thunks\r\nexport const fetchTodolistsThunkCreator = () => {\r\n  //Dispatch<ActionsType>\r\n  return (dispatch: any) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n\r\n    todolistsAPI\r\n      .getTodolists()\r\n      .then((res) => {\r\n        dispatch(setTodolistsAC(res.data));\r\n        dispatch(setAppStatusAC(\"succeeded\"));\r\n        return res.data;\r\n      })\r\n      .then((todos) => {\r\n        todos.forEach((td) => dispatch(fetchTasksThunkCreator(td.id)));\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      });\r\n  };\r\n};\r\n\r\nexport const removeTodolistThunkCreator = (todolistId: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n    todolistsAPI.deleteTodolist(todolistId).then((res) => {\r\n      dispatch(removeTodolistAC(todolistId));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    });\r\n  };\r\n};\r\n\r\nexport const addTodolistThunkCreator = (title: string) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.createTodolist(title).then((res) => {\r\n      dispatch(addTodolistAC(res.data.data.item));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    });\r\n  };\r\n};\r\n\r\nexport const changeTodolistTitleThunkCreator = (\r\n  todolistId: string,\r\n  newTitle: string\r\n) => {\r\n  return (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"));\r\n    todolistsAPI.updateTodolistTitle(todolistId, newTitle).then((res) => {\r\n      dispatch(changeTodolistTitleAC(todolistId, newTitle));\r\n      dispatch(setAppStatusAC(\"succeeded\"));\r\n    });\r\n  };\r\n};\r\n","import { authAPI } from './../../api/todolists-api';\r\nimport { Dispatch } from 'redux'\r\nimport { LoginParamsType } from '../../api/todolists-api'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\nimport { clearTodosDataAC, ClearTodosDataActionType } from '../TodolistsList/todolists-reducer';\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'login/SET-IS-LOGGED-IN':\r\n         return { ...state, isLoggedIn: action.value }\r\n      default:\r\n         return state\r\n   }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n   ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   authAPI.login(data)\r\n      .then(res => {\r\n         if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n         } else {\r\n            handleServerAppError(res.data, dispatch)\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         handleServerNetworkError(error, dispatch)\r\n      })\r\n      .finally(() => dispatch(setAppStatusAC(\"idle\")));\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n   dispatch(setAppStatusAC('loading'))\r\n   authAPI.logout()\r\n      .then(res => {\r\n         if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(clearTodosDataAC())\r\n         } else {\r\n            handleServerAppError(res.data, dispatch)\r\n         }\r\n      })\r\n      .catch((error) => {\r\n         handleServerNetworkError(error, dispatch)\r\n      })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType | ClearTodosDataActionType\r\n","import { authReducer } from './../features/Login/auth-reducer';\r\nimport { appReducer } from './app-reducer';\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { todolistsReducer } from \"../features/TodolistsList/todolists-reducer\";\r\n\r\n//корневой reducer который получает все action-ы и раскидывает дальше по всем редьюсерам\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n//создаёт тип на основе анализа того что rootReducer возвращает\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox, ControlPoint} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void,\r\n    disabled?: boolean \r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm\")\r\n    let [title, setTitle] = useState('')\r\n\r\n\r\n    const [error, setError] = useState<null | string>(null)\r\n\r\n    const trimmedTitle = title.trim()\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    };\r\n    const addItemHandler = () => {\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle);\r\n            setTitle('')\r\n        } else {\r\n            setError('Название не может быть пустым')\r\n        }\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                disabled={disabled}\r\n                label={'Title'}\r\n                value={title}\r\n                onChange={inputChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                helperText={error}\r\n            />\r\n            <IconButton\r\n                color={'primary'}\r\n                onClick={addItemHandler}\r\n                disabled={disabled}\r\n            >\r\n                <ControlPoint />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n} )","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function EditableSpan(props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan\")\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant={\"standard\"}\r\n                     value={title}\r\n                     onBlur={activateViewMode}\r\n                     autoFocus\r\n                     onChange={onChangeTitleHandler}\r\n        />\r\n        : <span onDoubleClick={activateEditMode}>{title}</span>\r\n\r\n})","import {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport { TaskStatuses } from \"../../../../api/todolists-api\";\r\nimport { EditableSpan } from \"../../../../components/EditableSpan/EditableSpan\";\r\n\r\n\r\n\r\ntype TaskPropsType = {\r\n    taskId: string\r\n    todolistId: string\r\n    title: string\r\n    status: TaskStatuses\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todoListID: string, taskID: string, newTitle: string) => void\r\n    removeTask: (todoListID: string, id: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback( () => props.removeTask(props.todolistId, props.taskId), [props.todolistId, props.taskId] )\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>{\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n    props.changeTaskStatus(props.todolistId, props.taskId, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)}, [props.todolistId, props.taskId])\r\n\r\n    const onTitleChangeHandler =  useCallback((newValue: string) => props.changeTaskTitle(props.todolistId, props.taskId, newValue),\r\n        [props.changeTaskTitle, props.todolistId, props.taskId])\r\n\r\n    return (<div className={props.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                color={'secondary'}\r\n                checked={props.status === TaskStatuses.Completed }\r\n                onChange={onChangeHandler}\r\n            />\r\n            <EditableSpan title={props.title} onChange={onTitleChangeHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n             {/*   <Delete/>*/} x\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api';\r\nimport { fetchTasksThunkCreator } from '../tasks-reducer';\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, IconButton } from '@material-ui/core';\r\nimport { Task } from './Task/Task';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\r\n\r\n\r\n\r\ntype TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (todoListID: string, title: string) => void\r\n    removeTask: (todoListID: string, id: string) => void\r\n    changeFilter: (todoListID: string, value: FilterValuesType) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todoListID: string, taskID: string, newTitle: string) => void\r\n    changeTodolistTitle: (todoListID: string, newTitle: string) => void\r\n    removeTodolist: (todoListID: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodoList = React.memo(function ({demo = false, ...props}: TodoListPropsType) {\r\nconsole.log(\"TodoList\")\r\n\r\nconst dispatch = useDispatch()\r\n\r\n// useEffect( () => {\r\n//     if (demo) {return}\r\n//     dispatch(fetchTasksThunkCreator(props.todolist.id))\r\n// }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props.todolist.id, title)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodoList = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(props.todolist.id, 'all')\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(props.todolist.id, 'active')\r\n    }, [props.changeFilter, props.todolist.id])\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(props.todolist.id, 'completed')\r\n    }, [props.changeFilter, props.todolist.id])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3><EditableSpan title={props.todolist.title} onChange={\r\n                useCallback((newValue) => {\r\n                    props.changeTodolistTitle(props.todolist.id, newValue)\r\n                }, [ props.changeTodolistTitle,props.todolist.id ])\r\n            }/>\r\n                <IconButton onClick={removeTodoList} disabled={props.todolist.entityStatus === 'loading'}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                addItem={addTask}\r\n                disabled={props.todolist.entityStatus === 'loading'}\r\n            />\r\n\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => <Task key={t.id}\r\n                                                    taskId={t.id}\r\n                                                    title={t.title}\r\n                                                    status={t.status}\r\n                                                    todolistId={props.todolist.id}\r\n                                                    changeTaskStatus={props.changeTaskStatus}\r\n                                                    changeTaskTitle={props.changeTaskTitle}\r\n                                                    removeTask={props.removeTask}\r\n                    />)\r\n                }\r\n\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    onClick={onAllClickHandler}\r\n                    variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    color={'default'}\r\n                >All</Button>\r\n                <Button onClick={onActiveClickHandler}\r\n                        variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                        color={'primary'}\r\n                >Active</Button>\r\n                <Button onClick={onCompletedClickHandler}\r\n                        variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                        color={'secondary'}\r\n                >Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport {\r\n    addTodolistThunkCreator, changeTodolistFilterAC,\r\n    changeTodolistTitleThunkCreator,\r\n    fetchTodolistsThunkCreator,\r\n    FilterValuesType,\r\n    removeTodolistThunkCreator,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Grid, Paper } from \"@material-ui/core\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { addTaskThunkCreator, removeTaskThunkCreator, TasksStateType, updateTaskThunkCreator } from './tasks-reducer';\r\nimport { TaskStatuses } from '../../api/todolists-api';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\r\nimport { TodoList } from './Todolist/TodoList';\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nconst TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n   \r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) { return }\r\n        dispatch(fetchTodolistsThunkCreator())\r\n    }, [])\r\n\r\n    const changeFilter = useCallback((todoListId: string, value: FilterValuesType) => {\r\n\r\n        const action = changeTodolistFilterAC(todoListId, value)\r\n\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n\r\n    const removeTask = useCallback((todolistId: string, taskId: string) => {\r\n\r\n        dispatch(removeTaskThunkCreator(todolistId, taskId))\r\n\r\n    }, [dispatch])\r\n\r\n\r\n    const addTask = useCallback((todolistId: string, newTaskTitle: string) => {\r\n\r\n        dispatch(addTaskThunkCreator(todolistId, newTaskTitle))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string, newTitle: string) => {\r\n\r\n        dispatch(updateTaskThunkCreator(todolistId, taskId, { title: newTitle }))\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todolistId: string, taskId: string, status: TaskStatuses) => {\r\n\r\n        dispatch(updateTaskThunkCreator(todolistId, taskId, { status }))\r\n\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n\r\n        dispatch(removeTodolistThunkCreator(todolistId))\r\n\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n\r\n        const action = addTodolistThunkCreator(title)\r\n\r\n        dispatch(action)\r\n\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n\r\n        dispatch(changeTodolistTitleThunkCreator(todolistId, newTitle))\r\n\r\n    }, [dispatch])\r\n\r\n\r\n\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container spacing={3} style={{ padding: \"20px\" }}>\r\n            <AddItemForm addItem={addTodoList} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(td => {\r\n                    let allTodolistTasks = tasks[td.id]\r\n\r\n\r\n                    return <Grid item key={td.id}>\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            <TodoList \r\n                                todolist={td}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeTaskStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n\r\n\r\n    </>\r\n}\r\n\r\nexport default TodolistsList;","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n  //const [open, setOpen] = React.useState(true);\r\n\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n    //setOpen(false);\r\n  };\r\n\r\n\r\n  const isOpen = error !== null\r\n\r\n  return (\r\n\r\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\" >\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Grid,\r\n  FormControl,\r\n  FormLabel,\r\n  FormGroup,\r\n  TextField,\r\n  FormControlLabel,\r\n  Button,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"./auth-reducer\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n};\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n    },\r\n    validate: (values) => {\r\n      //   if (!values.email) {\r\n      //     return {\r\n      //       email: \"Email is required\",\r\n      //     };\r\n      //   }\r\n      //   if (!values.password) {\r\n      //     return {\r\n      //       password: \"Password is required\",\r\n      //     };\r\n      //   }\r\n\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = \"Email is required\";\r\n      } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n      ) {\r\n        errors.email = \"Invalid email address\";\r\n      }\r\n\r\n      if (!values.password) {\r\n        errors.password = \"Password is required\";\r\n      } else if (values.password.length < 3) {\r\n        errors.password = \"Password must be longer than 3 characters\";\r\n      }\r\n\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(loginTC(values));\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  if (isLoggedIn) {\r\n     return <Navigate to={'/'}/>\r\n  }\r\n  //preventDefault() - отмени дефолтное поведение сабмита(перезагрузку страницы)\r\n\r\n  return (\r\n    <Grid container justifyContent={\"center\"}>\r\n      <Grid item justifyContent={\"center\"}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered\r\n                <a\r\n                  href={\"https://social-network.samuraijs.com/\"}\r\n                  target={\"_blank\"}\r\n                >\r\n                  {\" \"}\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"email\")}\r\n              />\r\n              {formik.touched.email && formik.errors.email && (\r\n                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n              )}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps(\"password\")}\r\n              />\r\n              {formik.touched.password && formik.errors.password && (\r\n                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n              )}\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                control={<Checkbox />}\r\n                {...formik.getFieldProps(\"rememberMe\")}\r\n              />\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport {\r\n  AppBar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  IconButton,\r\n  LinearProgress,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport TodolistsList from \"../features/TodolistsList/TodolistsList\";\r\nimport { ErrorSnackbar } from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"./store\";\r\nimport { initializeAppTC, RequestStatusType } from \"./app-reducer\";\r\nimport { Login } from \"../features/Login/Login\";\r\nimport { Route, Routes, Navigate } from \"react-router-dom\";\r\nimport { logoutTC } from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n  demo?: boolean;\r\n};\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n  const status = useSelector<AppRootStateType, RequestStatusType>(\r\n    (state) => state.app.status\r\n  );\r\n  const isInitialized = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.app.isInitialized\r\n  );\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC());\r\n  }, []);\r\n\r\n  const logoutHandler = useCallback(() => {\r\n    dispatch(logoutTC());\r\n  }, []);\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: \"30%\",\r\n          textAlign: \"center\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">News</Typography>\r\n          {isLoggedIn && (\r\n            <Button color=\"inherit\" onClick={logoutHandler}>\r\n              Log out\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n        {status === \"loading\" && <LinearProgress />}\r\n      </AppBar>\r\n      <Container fixed>\r\n        <Routes>\r\n          <Route path={\"login\"} element={<Login />} />\r\n          <Route path={\"/\"} element={<TodolistsList demo={demo} />} />\r\n          <Route path={\"404\"} element={<h1>404: page not found</h1>} />\r\n          {/* звёздочка значит \"абсолютно любой путь\" */}\r\n          <Route path={\"*\"} element={<Navigate to=\"/404\" />} />\r\n        </Routes>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}