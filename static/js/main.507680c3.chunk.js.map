{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","taskTitle","taskId","model","authAPI","data","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","isLoggedIn","setIsLoggedInAC","value","updateTaskThunkCreator","domainModel","getState","task","tasks","find","t","id","apiModel","description","priority","startDate","deadline","then","res","resultCode","updateTaskAC","catch","console","warn","rootReducer","combineReducers","todolists","state","action","filter","tl","newTodoList","todolist","entityStatus","map","stateCopy","filteredTasks","newTask","todoListId","newTasks","forEach","app","auth","store","createStore","applyMiddleware","thunkMiddleware","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","trimmedTitle","trim","addItemHandler","TextField","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","ControlPoint","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","TodoList","demo","useDispatch","useEffect","setTasksAC","items","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","changeTodolistTitle","removeTodolist","Delete","Button","TodolistsList","useSelector","removeTaskAC","removeTaskThunkCreator","newTaskTitle","item","addTaskThunkCreator","newTitle","removeTodolistAC","removeTodolistThunkCreator","addTodoList","addTodolistThunkCreator","changeTodolistTitleThunkCreator","Grid","container","spacing","style","padding","td","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","render","exact","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.507680c3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from \"axios\";\n\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        \"api-key\": \"bcdd4faf-f5b8-4f33-8a06-1a47aa179469\"\n    }\n}\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    ...settings\n})\n\nexport const todolistsAPI = {\n\n    getTodolists() {\n        const promise = instance.get<Array<TodolistType>>(\"todo-lists\")\n        return promise\n    },\n    createTodolist(title: string) {\n        return  instance.post< {title: string}, {data: ResponseType <{item: TodolistType}> } >(\"todo-lists\", {title})\n\n    },\n    deleteTodolist(todolistId: string) {\n        const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}`)\n        return promise\n    },\n    updateTodolistTitle(todolistId: string, title: string) {\n        const promise = instance.put< {title: string}, AxiosResponse<ResponseType> >(`todo-lists/${todolistId}`, {title})\n        return promise\n    },\n\n\n\n\n\n    getTasks(todolistId: string) {\n        const promise = instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n        return promise\n    },\n    createTask(todolistId: string, taskTitle: string) {\n        const promise = instance.post< {title: string}, AxiosResponse< ResponseType<{item: TaskType}> > >(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\n        return promise\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        const promise = instance.put< UpdateTaskModelType,  AxiosResponse< ResponseType<{item: TaskType}> > >(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n        return promise\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\n        return promise\n    }\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\nexport const authAPI = {\n    login(data: LoginParamsType) {\n        return  instance.post<{data: LoginParamsType},AxiosResponse< ResponseType <{userId?: number}>>>(\"auth/login\", {data})\n    },\n    logout() {\n       return instance.delete<ResponseType<{userId?: number}>>('/auth/login') \n    },\n    me() {\n        return instance.get<ResponseType<LoginParamsType>>('auth/me')\n    }\n }\n \n\n\n// types \nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\ntype GetTasksResponse = {\n    items: Array<TaskType>\n    totalCount: number\n    error: string | null\n}\n\ntype CreateUpdateTaskResponse = {\n    item: TaskType\n    resultCode: number\n    messages: Array<string>\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n   Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type UpdateTaskModelType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n","import { setIsLoggedInAC } from './../features/Login/auth-reducer';\nimport { Dispatch } from \"redux\"\nimport { authAPI } from \"../api/todolists-api\"\n\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type AppInitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если произойдёт какая-либо глобальная ошибка, мы запишем текст ошибки сюда\n    error: null | string\n    // true когда приложение пронициализировалось (проверили юзера, получили настройки и т.д.)\n    isInitialized: boolean\n}\n\nconst initialState: AppInitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\n\n\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return { ...state, status: action.status }\n        case 'APP/SET-ERROR':\n            return { ...state, error: action.error }\n        case \"APP/SET-IS-INITIALIZED\":\n            return { ...state, isInitialized: action.value }\n        default:\n            return state\n    }\n}\n\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\nexport const setAppInitializedAC = (value: boolean) => ({ type: 'APP/SET-IS-INITIALIZED', value } as const)\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n            \n            } else {\n\n            }\n            dispatch(setAppInitializedAC(true))\n        })\n}\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | ReturnType<typeof setAppInitializedAC>","\nimport { Dispatch } from \"redux\"\nimport { ResponseType } from \"../api/todolists-api\"\nimport { setAppErrorAC, setAppStatusAC, SetAppErrorActionType, SetAppStatusActionType } from \"../app/app-reducer\"\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType> ) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC(\"some error occured\"))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'some error occurred'))\n    dispatch(setAppStatusAC('failed'))\n}","import { authAPI } from './../../api/todolists-api';\nimport { Dispatch } from 'redux'\nimport { LoginParamsType } from '../../api/todolists-api'\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\n\nconst initialState = {\n   isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n   switch (action.type) {\n      case 'login/SET-IS-LOGGED-IN':\n         return { ...state, isLoggedIn: action.value }\n      default:\n         return state\n   }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n   ({ type: 'login/SET-IS-LOGGED-IN', value } as const)\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n   dispatch(setAppStatusAC('loading'))\n   authAPI.login(data)\n      .then(res => {\n         if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n         } else {\n            handleServerAppError(res.data, dispatch)\n         }\n      })\n      .catch((error) => {\n         handleServerNetworkError(error, dispatch)\n      })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n   dispatch(setAppStatusAC('loading'))\n   authAPI.logout()\n      .then(res => {\n         if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setAppStatusAC('succeeded'))\n         } else {\n            handleServerAppError(res.data, dispatch)\n         }\n      })\n      .catch((error) => {\n         handleServerNetworkError(error, dispatch)\n      })\n}\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\n","import { setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from './../../app/app-reducer';\r\n\r\nimport { TaskPriorities, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api';\r\nimport { v1 } from 'uuid';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, setTodolistsAC, SetTodolistsActionType } from \"./todolists-reducer\";\r\nimport { TaskStatuses } from '../../api/todolists-api';\r\nimport { Dispatch } from 'redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\n\r\n// types\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport type UpdateTaskActionType = ReturnType<typeof updateTaskAC>\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\ntype ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | UpdateTaskActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetTasksActionType\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    description?: string\r\n    title?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\": {\r\n            const stateCopy = { ...state };\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id != action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy;\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = { ...state };\r\n            const newTask = action.task;\r\n            const tasks = stateCopy[newTask.todoListId]\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[newTask.todoListId] = newTasks\r\n            return stateCopy;\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            const stateCopy = { ...state };\r\n            const tasks = stateCopy[action.todolistId];\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? { ...t, ...action.model } : t);\r\n\r\n            return stateCopy;\r\n        }\r\n\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = { ...state };\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = { ...state };\r\n\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => ({ type: 'REMOVE-TASK', todolistId, taskId }) as const\r\nexport const addTaskAC = (task: TaskType) => ({ type: 'ADD-TASK', task }) as const\r\nexport const updateTaskAC = (todolistId: string, taskId: string, model: UpdateDomainTaskModelType) => ({ type: 'UPDATE-TASK', taskId, todolistId, model }) as const\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({ type: 'SET-TASKS', tasks, todolistId }) as const\r\n\r\n\r\n//thunks\r\nexport const fetchTasksThunkCreator = (todolistId: string) => (\r\n    (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    })\r\n\r\nexport const removeTaskThunkCreator = (todolistId: string, taskId: string) => {\r\n\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then(res => {\r\n                dispatch(removeTaskAC(todolistId, taskId))\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport const addTaskThunkCreator = (todolistId: string, newTaskTitle: string) => {\r\n\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTask(todolistId, newTaskTitle)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch) \r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTaskThunkCreator = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) => {\r\n\r\n    return (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n        const state = getState();\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\")\r\n            console.warn(\"task not found in the state\");\r\n            return\r\n\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            description: task.description,\r\n            title: task.title,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...domainModel\r\n        }\r\n\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(todolistId, taskId, domainModel))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)              \r\n            })\r\n    }\r\n}\r\n","import { SetAppErrorActionType } from './../../app/app-reducer';\nimport { TodolistType, todolistsAPI } from './../../api/todolists-api';\nimport { Dispatch } from \"redux\";\nimport { RequestStatusType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer';\nimport { handleServerNetworkError } from '../../utils/error-utils';\n\n\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\nexport type ChangeTodolistFilterActionType = ReturnType<typeof changeTodolistFilterAC>\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>\n\n\ntype ActionsType =\n    RemoveTodolistActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ChangeTodolistFilterActionType\n    | SetTodolistsActionType\n    | SetAppStatusActionType\n    | SetAppErrorActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\n\n\n\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType,\n    entityStatus: RequestStatusType\n}\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.id);\n\n        case 'ADD-TODOLIST':\n            let newTodoList: TodolistDomainType = {\n                ...action.todolist,\n                filter: 'all',\n                entityStatus: 'idle'\n            }\n            return [newTodoList, ...state];\n\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title } : tl);\n\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tl => tl.id === action.id ? { ...tl, filter: action.filter } : tl);\n\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? { ...tl, entityStatus: action.status } : tl);\n\n        case \"SET-TODOLISTS\":\n            return action.todolists.map(tl => ({ ...tl, filter: \"all\", entityStatus: 'idle' }))\n\n\n        default:\n            return state\n    }\n}\n\n\n// actions\nexport const removeTodolistAC = (todolistId: string) => ({ type: 'REMOVE-TODOLIST', id: todolistId }) as const\n\nexport const addTodolistAC = (todolist: TodolistType) => ({ type: 'ADD-TODOLIST', todolist }) as const\n\nexport const changeTodolistTitleAC = (id: string, title: string) => ({ type: 'CHANGE-TODOLIST-TITLE', id, title }) as const\n\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({ type: 'CHANGE-TODOLIST-FILTER', id, filter }) as const\n\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({ type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, status }) as const\n\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({ type: \"SET-TODOLISTS\", todolists }) as const\n\n\n\n\n// thunks\nexport const fetchTodolistsThunkCreator = () => {\n\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        \n        todolistsAPI.getTodolists()\n            .then((res) => {\n                dispatch(setTodolistsAC(res.data))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n            .catch(error => {\n                handleServerNetworkError(error, dispatch)\n            })\n    }\n}\n\n\nexport const removeTodolistThunkCreator = (todolistId: string) => {\n\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC(todolistId))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\n\nexport const addTodolistThunkCreator = (title: string) => {\n\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.createTodolist(title)\n            .then((res) => {\n                dispatch(addTodolistAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\n\nexport const changeTodolistTitleThunkCreator = (todolistId: string, newTitle: string) => {\n\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.updateTodolistTitle(todolistId, newTitle)\n            .then((res) => {\n                dispatch(changeTodolistTitleAC(todolistId, newTitle))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\n","import { authReducer } from './../features/Login/auth-reducer';\nimport { appReducer } from './app-reducer';\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport { todolistsReducer } from \"../features/TodolistsList/todolists-reducer\";\n\n//корневой reducer который получает все action-ы и раскидывает дальше по всем редьюсерам\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\n//создаёт тип на основе анализа того что rootReducer возвращает\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n\n\n\n// @ts-ignore\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox, ControlPoint} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void,\n    disabled?: boolean \n}\n\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\n    console.log(\"AddItemForm\")\n    let [title, setTitle] = useState('')\n\n\n    const [error, setError] = useState<null | string>(null)\n\n    const trimmedTitle = title.trim()\n\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    };\n    const addItemHandler = () => {\n        if (trimmedTitle) {\n            addItem(trimmedTitle);\n            setTitle('')\n        } else {\n            setError('Название не может быть пустым')\n        }\n\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null)\n        }\n\n        if (e.charCode === 13) {\n            addItemHandler()\n        }\n    };\n\n\n    return (\n        <div>\n            <TextField\n                variant={\"outlined\"}\n                disabled={disabled}\n                label={'Title'}\n                value={title}\n                onChange={inputChangeHandler}\n                onKeyPress={onKeyPressHandler}\n                error={!!error}\n                helperText={error}\n            />\n            <IconButton\n                color={'primary'}\n                onClick={addItemHandler}\n                disabled={disabled}\n            >\n                <ControlPoint />\n            </IconButton>\n        </div>\n    )\n} )","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function EditableSpan(props: EditableSpanPropsType) {\n    console.log(\"EditableSpan\")\n\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState(props.title)\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        props.onChange(title)\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField variant={\"standard\"}\n                     value={title}\n                     onBlur={activateViewMode}\n                     autoFocus\n                     onChange={onChangeTitleHandler}\n        />\n        : <span onDoubleClick={activateEditMode}>{title}</span>\n\n})","import {Checkbox, IconButton} from \"@material-ui/core\";\nimport React, {ChangeEvent, useCallback} from \"react\";\nimport { TaskStatuses } from \"../../../../api/todolists-api\";\nimport { EditableSpan } from \"../../../../components/EditableSpan/EditableSpan\";\n\n\n\ntype TaskPropsType = {\n    taskId: string\n    todolistId: string\n    title: string\n    status: TaskStatuses\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\n    changeTaskTitle: (todoListID: string, taskID: string, newTitle: string) => void\n    removeTask: (todoListID: string, id: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback( () => props.removeTask(props.todolistId, props.taskId), [props.todolistId, props.taskId] )\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>{\n        let newIsDoneValue = e.currentTarget.checked;\n    props.changeTaskStatus(props.todolistId, props.taskId, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)}, [props.todolistId, props.taskId])\n\n    const onTitleChangeHandler =  useCallback((newValue: string) => props.changeTaskTitle(props.todolistId, props.taskId, newValue),\n        [props.changeTaskTitle, props.todolistId, props.taskId])\n\n    return (<div className={props.status === TaskStatuses.Completed ? 'is-done' : ''}>\n            <Checkbox\n                color={'secondary'}\n                checked={props.status === TaskStatuses.Completed }\n                onChange={onChangeHandler}\n            />\n            <EditableSpan title={props.title} onChange={onTitleChangeHandler}/>\n            <IconButton onClick={onClickHandler}>\n             {/*   <Delete/>*/} x\n            </IconButton>\n        </div>\n    )\n})","import React, {useCallback, useEffect} from 'react';\nimport {Delete} from \"@material-ui/icons\";\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api';\nimport { fetchTasksThunkCreator } from '../tasks-reducer';\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer';\nimport { useDispatch } from 'react-redux';\nimport { Button, IconButton } from '@material-ui/core';\nimport { Task } from './Task/Task';\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\n\n\n\ntype TodoListPropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    addTask: (todoListID: string, title: string) => void\n    removeTask: (todoListID: string, id: string) => void\n    changeFilter: (todoListID: string, value: FilterValuesType) => void\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\n    changeTaskTitle: (todoListID: string, taskID: string, newTitle: string) => void\n    changeTodolistTitle: (todoListID: string, newTitle: string) => void\n    removeTodolist: (todoListID: string) => void\n    demo?: boolean\n}\n\nexport const TodoList = React.memo(function ({demo = false, ...props}: TodoListPropsType) {\nconsole.log(\"TodoList\")\n\nconst dispatch = useDispatch()\n\nuseEffect( () => {\n    if (demo) {return}\n    dispatch(fetchTasksThunkCreator(props.todolist.id))\n}, [])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(props.todolist.id, title)\n    }, [props.addTask, props.todolist.id])\n\n    const removeTodoList = () => {\n        props.removeTodolist(props.todolist.id)\n    }\n\n    const onAllClickHandler = useCallback(() => {\n        props.changeFilter(props.todolist.id, 'all')\n    }, [props.changeFilter, props.todolist.id])\n    const onActiveClickHandler = useCallback(() => {\n        props.changeFilter(props.todolist.id, 'active')\n    }, [props.changeFilter, props.todolist.id])\n    const onCompletedClickHandler = useCallback(() => {\n        props.changeFilter(props.todolist.id, 'completed')\n    }, [props.changeFilter, props.todolist.id])\n\n\n    let tasksForTodolist = props.tasks\n\n    if (props.todolist.filter === \"active\") {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === \"completed\") {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return (\n        <div>\n            <h3><EditableSpan title={props.todolist.title} onChange={\n                useCallback((newValue) => {\n                    props.changeTodolistTitle(props.todolist.id, newValue)\n                }, [ props.changeTodolistTitle,props.todolist.id ])\n            }/>\n                <IconButton onClick={removeTodoList} disabled={props.todolist.entityStatus === 'loading'}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm\n                addItem={addTask}\n                disabled={props.todolist.entityStatus === 'loading'}\n            />\n\n            <div>\n                {\n                    tasksForTodolist.map(t => <Task key={t.id}\n                                                    taskId={t.id}\n                                                    title={t.title}\n                                                    status={t.status}\n                                                    todolistId={props.todolist.id}\n                                                    changeTaskStatus={props.changeTaskStatus}\n                                                    changeTaskTitle={props.changeTaskTitle}\n                                                    removeTask={props.removeTask}\n                    />)\n                }\n\n            </div>\n            <div>\n                <Button\n                    onClick={onAllClickHandler}\n                    variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n                    color={'default'}\n                >All</Button>\n                <Button onClick={onActiveClickHandler}\n                        variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n                        color={'primary'}\n                >Active</Button>\n                <Button onClick={onCompletedClickHandler}\n                        variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n                        color={'secondary'}\n                >Completed</Button>\n            </div>\n        </div>\n    )\n})\n\n","import React, { useCallback, useEffect } from 'react';\nimport {\n    addTodolistThunkCreator, changeTodolistFilterAC,\n    changeTodolistTitleThunkCreator,\n    fetchTodolistsThunkCreator,\n    FilterValuesType,\n    removeTodolistThunkCreator,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid, Paper } from \"@material-ui/core\";\nimport { AppRootStateType } from \"../../app/store\";\nimport { addTaskThunkCreator, removeTaskThunkCreator, TasksStateType, updateTaskThunkCreator } from './tasks-reducer';\nimport { TaskStatuses } from '../../api/todolists-api';\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\nimport { TodoList } from './Todolist/TodoList';\nimport { Redirect } from 'react-router';\n\ntype PropsType = {\n    demo?: boolean\n}\n\n\nconst TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\n\n\n    const dispatch = useDispatch()\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n   \n    useEffect(() => {\n        if (demo || !isLoggedIn) { return }\n        dispatch(fetchTodolistsThunkCreator())\n    }, [])\n\n    const changeFilter = useCallback((todoListId: string, value: FilterValuesType) => {\n\n        const action = changeTodolistFilterAC(todoListId, value)\n\n        dispatch(action)\n\n    }, [dispatch])\n\n\n    const removeTask = useCallback((todolistId: string, taskId: string) => {\n\n        dispatch(removeTaskThunkCreator(todolistId, taskId))\n\n    }, [dispatch])\n\n\n    const addTask = useCallback((todolistId: string, newTaskTitle: string) => {\n\n        dispatch(addTaskThunkCreator(todolistId, newTaskTitle))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string, newTitle: string) => {\n\n        dispatch(updateTaskThunkCreator(todolistId, taskId, { title: newTitle }))\n\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((todolistId: string, taskId: string, status: TaskStatuses) => {\n\n        dispatch(updateTaskThunkCreator(todolistId, taskId, { status }))\n\n    }, [dispatch])\n\n    const removeTodolist = useCallback((todolistId: string) => {\n\n        dispatch(removeTodolistThunkCreator(todolistId))\n\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n\n        const action = addTodolistThunkCreator(title)\n\n        dispatch(action)\n\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\n\n        dispatch(changeTodolistTitleThunkCreator(todolistId, newTitle))\n\n    }, [dispatch])\n\n\n\n\n    if(!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n\n    return <>\n        <Grid container spacing={3} style={{ padding: \"20px\" }}>\n            <AddItemForm addItem={addTodoList} />\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(td => {\n                    let allTodolistTasks = tasks[td.id]\n\n\n                    return <Grid item key={td.id}>\n                        <Paper style={{ padding: \"10px\" }}>\n                            <TodoList \n                                todolist={td}\n                                tasks={allTodolistTasks}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeTaskStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n\n\n    </>\n}\n\nexport default TodolistsList;","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../../app/store';\nimport { setAppErrorAC } from '../../app/app-reducer';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport function ErrorSnackbar() {\n  //const [open, setOpen] = React.useState(true);\n\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n  const dispatch = useDispatch()\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC(null))\n    //setOpen(false);\n  };\n\n\n  const isOpen = error !== null\n\n  return (\n\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\" >\n        {error}\n      </Alert>\n    </Snackbar>\n\n  );\n}\n","\nimport React from 'react'\nimport { Grid, FormControl, FormLabel, FormGroup, TextField, FormControlLabel, Button, Checkbox } from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginTC } from './auth-reducer';\nimport { AppRootStateType } from '../../app/store';\nimport { Redirect } from 'react-router';\n\n\nexport const Login = () => {\n const dispatch = useDispatch()\n\nconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            if (!values.email) {\n                return {\n                    email: 'Email is required'\n                }\n            }\n            if (!values.password) {\n                return {\n                    password: 'Password is required'\n                }\n            }\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n        },\n    })\n\n    if(isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n  //preventDefault() - отмени дефолтное поведение сабмита(перезагрузку страницы)\n\n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n          \n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                                target={'_blank'}> here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")} />\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox />}\n                            {...formik.getFieldProps(\"rememberMe\")} />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n\n\n\n","import React, { useCallback, useEffect } from 'react';\nimport './App.css';\nimport { Menu } from \"@material-ui/icons\";\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from \"@material-ui/core\";\nimport TodolistsList from '../features/TodolistsList/TodolistsList';\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from './store';\nimport { initializeAppTC, RequestStatusType } from './app-reducer';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Login } from '../features/Login/Login';\nimport { Route } from 'react-router';\nimport { logoutTC } from '../features/Login/auth-reducer';\n\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({ demo = false }: PropsType) {\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    const logoutHandler = useCallback(() => {\n        dispatch(logoutTC())\n    }, [])\n\n\n\n    if (!isInitialized) {\n        return <div style={{ position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\" }}>\n            <CircularProgress />\n        </div>\n    }\n\n  \n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                < ErrorSnackbar />\n                <AppBar position=\"static\">\n\n                    <Toolbar>\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                        >\n                            <Menu />\n                        </IconButton>\n                        <Typography variant=\"h6\">\n                            News\n                        </Typography>\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\n                    </Toolbar>\n                    {status === 'loading' && <LinearProgress />}\n                </AppBar>\n                <Container fixed>\n                    <Route path={'/login'} render={() => <Login />} />\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\n\n                </Container>\n            </div>\n        </BrowserRouter>\n    )\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport {store} from \"./app/store\";\nimport App from './app/App';\n\nReactDOM.render(\n    <Provider store={store} >\n    <App />\n    </Provider>\n    ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}